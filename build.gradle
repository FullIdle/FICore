buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            allowInsecureProtocol = true
            url = 'http://server.pokemtd.top:31647/snapshots'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.0.+'
    }
}

plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT' apply(false)
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply(false)
    id 'org.jetbrains.kotlin.jvm' version '2.0.20'
    id 'java'
    id 'maven-publish'
}

group = 'me.fullidle.ficore.ficore'
version = '1.3.1'

def common = project(':common')

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    kotlin {
        jvmToolchain(8)
    }

    java {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            url "http://server.pokemtd.top:31647/snapshots"
        }
    }

    dependencies {
        if (project != common && project != rootProject) {
            compileOnly common
        }
        /*==>lombok<==*/
        compileOnly('org.projectlombok:lombok:1.18.34')
        annotationProcessor('org.projectlombok:lombok:1.18.34')
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    processResources {
        setFilteringCharset("UTF-8")
        expand project.properties
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            allowInsecureProtocol = true
            url = uri(fistudioUrl)
            credentials {
                username = fistudioUsername
                password = fistudioPassword
            }
        }
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot:1.16.5-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'

    compileOnly subprojects
}

jar {
    archiveFileName = "${project.name}-${project.version}.jar"
    from(subprojects.collect {it.sourceSets.main.output})
}
